@page "/"

@using AzureTranslator.Components.UI
@using AzureTranslator.Models
@using AzureTranslator.Services

@inject IAzureTranslatorService AzureTranslatorService;
@inject IAzureBlobService AzureBlobService;

<PageTitle>Home</PageTitle>

@if (_isLoading)
{
    <MudStack Class="mt-20" AlignItems="AlignItems.Center" Justify="Justify.Center" Style="width: 100%">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText>Uploading & Translating Files</MudText>
    </MudStack>
}

@if (_downloadReady)
{
    <DownloadSection Files="_files" OnStartNew="StartNew" />
}

<div class="@(_isLoading || _downloadReady ? "d-none" : "")">
    <LangSelector @ref="_langSelect" />
    <UploadZone OnUpload="Upload" @ref="_uploadZone" />
</div>

@code {
    private bool _isLoading;
    private bool _downloadReady;
    private readonly List<UploadedFile> _files = [];
    private UploadZone? _uploadZone;
    private LangSelector? _langSelect;
    private string _currentFolderName = string.Empty;

    private async Task Upload()
    {
        _isLoading = true;
        StateHasChanged();

        _currentFolderName = Guid.CreateVersion7().ToString();

        foreach (var file in _uploadZone?.Files ?? [])
        {
            var blobName = await AzureBlobService.UploadFile(
                file,
                "source-docs",
                _currentFolderName
            );

            _files.Add(new UploadedFile
            {
                Name = file.Name,
                BlobName = blobName
            });
        }

        await AzureTranslatorService.TranslateDocs(
            "source-docs",
            "translated-docs",
            _currentFolderName,
            LangSelector.Languages[_langSelect?.SelectedLanguage ?? "English"]
        );

        foreach (var file in _files)
        {
            var blob = await AzureBlobService.GetBlob("source-docs", file.BlobName);
            await blob.DeleteIfExistsAsync();   
        }

        _uploadZone?.Files.Clear();
        _isLoading = false;
        _downloadReady = true;
        StateHasChanged();
    }

    private void StartNew()
    {
        _downloadReady = false;
        _files.Clear();
        _currentFolderName = string.Empty;
        StateHasChanged();
    }
}