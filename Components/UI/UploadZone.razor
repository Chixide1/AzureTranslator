<style>
    .file-upload-input {
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: 10;
        opacity: 0;
        cursor: pointer;
    }
</style>

<div Style="width: 100%; padding-top: 0.75rem;">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   @ref="@_fileUpload"
                   OnFilesChanged="OnInputFileChanged"
                   AppendMultipleFiles
                   Hidden="@false"
                   InputClass="file-upload-input"
                   tabindex="-1"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="300px"
                      Outlined="true"
                      Class="@_dragClass">

                @if(Files.Count == 0)
                {
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 100%;">
                        <MudIcon Style="font-size: 4rem;" Icon="@Icons.Material.Filled.CloudUpload"></MudIcon>
                        <MudText Typo="Typo.h6" Class="mb-5">
                            Drag & Drop Files Here or Click To Browse
                        </MudText>
                    </MudStack>
                }

                @foreach (var file in Files)
                {
                    <MudChip T="string"
                             Color="Color.Dark"
                             Text="@file.Name"
                             Class="overflow-hidden"
                             tabindex="-1" />
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    <MudToolBar Gutters="@false"
                Class="relative d-flex justify-end gap-4">
        <MudButton Color="Color.Primary"
                   Disabled="@(!Files.Any())"
                   OnClick="@HandleUpload"
                   Variant="Variant.Filled">
            Upload
        </MudButton>
        <MudButton Color="Color.Error"
                   Disabled="@(!Files.Any())"
                   OnClick="@ClearAsync"
                   Variant="Variant.Filled">
            Clear
        </MudButton>
    </MudToolBar>
</div>

@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    public List<IBrowserFile> Files { get; set; } = [];
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    [Parameter] public EventCallback OnUpload { get; set; }

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        Files.Clear();
        ClearDragClass();
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();

        foreach (var file in files)
        {
            Files.Add(file);
        }
    }

    private async Task HandleUpload()
    {
        await OnUpload.InvokeAsync();
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}