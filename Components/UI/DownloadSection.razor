@using AzureTranslator.Models
@using AzureTranslator.Services

<MudStack Class="mt-20" AlignItems="AlignItems.Center" Justify="Justify.Center" Style="width: 100%">
    <MudAlert Variant="Variant.Outlined" Severity="Severity.Success">Translation Complete!</MudAlert>
    <MudText Typo="Typo.body1" Class="mb-4">Your translated files are ready for download.</MudText>

    <MudStack Row Spacing="2">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Download"
                   OnClick="DownloadFiles">
            Download Translated Files
        </MudButton>
        <MudButton Variant="Variant.Outlined"
                   StartIcon="@Icons.Material.Filled.AddToPhotos"
                   Color="Color.Primary"
                   OnClick="StartNew">
            Translate More Files
        </MudButton>
    </MudStack>
</MudStack>

@code {
    [Parameter] public List<UploadedFile> Files { get; set; } = [];
    [Parameter] public EventCallback OnStartNew { get; set; }

    @inject IAzureBlobService AzureBlobService
    @inject IJSRuntime JSRuntime

    private async Task DownloadFiles()
    {
        var downloadUrls = new List<string>();
        foreach (var file in Files)
        {
            var uri = await AzureBlobService.GenerateBlobSas("translated-docs", file.BlobName, file.Name);
            downloadUrls.Add(uri.ToString());
        }

        foreach(var url in downloadUrls)
        {
            var jsCode = $@"
                const link = document.createElement('a');
                link.href = '{url}';
                link.style.display = 'none';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            ";

            await Task.Delay(500);
            await JSRuntime.InvokeVoidAsync("eval", jsCode);
        }

        foreach (var file in Files)
        {
            var blob = await AzureBlobService.GetBlob("source-docs", file.BlobName);
            await blob.DeleteIfExistsAsync();
        }
    }

    private async Task StartNew()
    {
        await OnStartNew.InvokeAsync();
    }
}